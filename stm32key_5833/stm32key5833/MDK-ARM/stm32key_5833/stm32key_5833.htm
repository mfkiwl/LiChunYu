<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [stm32key_5833\stm32key_5833.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image stm32key_5833\stm32key_5833.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Fri May 03 09:40:00 2019
<BR><P>
<H3>Maximum Stack Usage =       1184 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ATA583X_WaitRx &rArr; ATA583X_FrameProc
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[31]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[19]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">BusFault_Handler</a><BR>
 <LI><a href="#[17]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">HardFault_Handler</a><BR>
 <LI><a href="#[18]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">MemManage_Handler</a><BR>
 <LI><a href="#[1a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[31]">ADC1_2_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[19]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[49]">COMP_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[56]">CRS_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[9]">CUSTOM_HID_DeInit_FS</a> from usbd_custom_hid_if.o(i.CUSTOM_HID_DeInit_FS) referenced 2 times from usbd_custom_hid_if.o(.data)
 <LI><a href="#[8]">CUSTOM_HID_Init_FS</a> from usbd_custom_hid_if.o(i.CUSTOM_HID_Init_FS) referenced 2 times from usbd_custom_hid_if.o(.data)
 <LI><a href="#[a]">CUSTOM_HID_OutEvent_FS</a> from usbd_custom_hid_if.o(i.CUSTOM_HID_OutEvent_FS) referenced 2 times from usbd_custom_hid_if.o(.data)
 <LI><a href="#[2a]">DMA1_Channel1_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel2_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel3_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel4_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel5_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel6_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[30]">DMA1_Channel7_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[44]">DMA2_Channel1_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[45]">DMA2_Channel2_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[46]">DMA2_Channel3_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[47]">DMA2_Channel4_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[48]">DMA2_Channel5_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel6_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel7_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[1c]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[25]">EXTI0_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[41]">EXTI15_10_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[26]">EXTI1_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[27]">EXTI2_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[28]">EXTI3_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[29]">EXTI4_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[32]">EXTI9_5_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[23]">FLASH_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[55]">FPU_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[17]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[39]">I2C1_ER_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[38]">I2C1_EV_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[3b]">I2C2_ER_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[3a]">I2C2_EV_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[52]">I2C3_ER_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[51]">I2C3_EV_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[4a]">LPTIM1_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[4b]">LPTIM2_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[4f]">LPUART1_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[18]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[16]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[20]">PVD_PVM_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[1d]">PendSV_Handler</a> from stm32l4xx_it.o(i.PendSV_Handler) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[50]">QUADSPI_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[24]">RCC_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[54]">RNG_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[42]">RTC_Alarm_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[22]">RTC_WKUP_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[15]">Reset_Handler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[3c]">SPI1_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[1b]">SVC_Handler</a> from stm32l4xx_it.o(i.SVC_Handler) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[1e]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[58]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l412xx.o(.text)
 <LI><a href="#[21]">TAMP_STAMP_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[33]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[36]">TIM1_CC_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[35]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[34]">TIM1_UP_TIM16_IRQHandler</a> from stm32l4xx_it.o(i.TIM1_UP_TIM16_IRQHandler) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[37]">TIM2_IRQHandler</a> from stm32l4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[43]">TIM6_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[53]">TSC_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[3e]">USART1_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[3f]">USART2_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[40]">USART3_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[f]">USBD_CUSTOM_HID_DataIn</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_DataIn) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[10]">USBD_CUSTOM_HID_DataOut</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_DataOut) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[c]">USBD_CUSTOM_HID_DeInit</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_DeInit) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[e]">USBD_CUSTOM_HID_EP0_RxReady</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_EP0_RxReady) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[14]">USBD_CUSTOM_HID_GetDeviceQualifierDesc</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_GetDeviceQualifierDesc) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[12]">USBD_CUSTOM_HID_GetFSCfgDesc</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_GetFSCfgDesc) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[11]">USBD_CUSTOM_HID_GetHSCfgDesc</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_GetHSCfgDesc) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[13]">USBD_CUSTOM_HID_GetOtherSpeedCfgDesc</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_GetOtherSpeedCfgDesc) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[b]">USBD_CUSTOM_HID_Init</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_Init) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[d]">USBD_CUSTOM_HID_Setup</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_Setup) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[5]">USBD_FS_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[0]">USBD_FS_DeviceDescriptor</a> from usbd_desc.o(i.USBD_FS_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[6]">USBD_FS_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[1]">USBD_FS_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_FS_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[2]">USBD_FS_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[3]">USBD_FS_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[4]">USBD_FS_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_FS_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[7]">USBD_FS_USR_BOSDescriptor</a> from usbd_desc.o(i.USBD_FS_USR_BOSDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[4c]">USB_IRQHandler</a> from stm32l4xx_it.o(i.USB_IRQHandler) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[1a]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[1f]">WWDG_IRQHandler</a> from startup_stm32l412xx.o(.text) referenced from startup_stm32l412xx.o(RESET)
 <LI><a href="#[59]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l412xx.o(.text)
 <LI><a href="#[57]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[59]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(.text)
</UL>
<P><STRONG><a name="[16b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[16c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[16d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[16e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[16f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[170]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[15]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l412xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[171]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[176]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>AS3933_COMM</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, as3933.o(i.AS3933_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AS3933_COMM &rArr; AS3933_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS3933_Proc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS3933_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>AS3933_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, as3933.o(i.AS3933_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AS3933_Init &rArr; AS3933_WriteReg &rArr; AS3933_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS3933_WriteReg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS3933_COMM
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>AS3933_Proc</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, as3933.o(i.AS3933_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AS3933_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS3933_WriteReg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS3933_COMM
</UL>

<P><STRONG><a name="[64]"></a>AS3933_WriteReg</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, as3933.o(i.AS3933_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AS3933_WriteReg &rArr; AS3933_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS3933_Proc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS3933_Init
</UL>

<P><STRONG><a name="[66]"></a>ATA583X_Check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ata5833.o(i.ATA583X_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ATA583X_Check &rArr; ATA583X_SPIProc &rArr; SimSPI_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_SPIProc
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_Init
</UL>

<P><STRONG><a name="[7a]"></a>ATA583X_FrameProc</STRONG> (Thumb, 226 bytes, Stack size 1064 bytes, ata5833.o(i.ATA583X_FrameProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = ATA583X_FrameProc
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
</UL>

<P><STRONG><a name="[68]"></a>ATA583X_ICProc</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ata5833.o(i.ATA583X_ICProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATA583X_ICProc
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[6b]"></a>ATA583X_IDLEMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ata5833.o(i.ATA583X_IDLEMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ATA583X_IDLEMode &rArr; ATA583X_SPIProc &rArr; SimSPI_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_SPIProc
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_TxFrameProc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_RFTxFrameProc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_Init
</UL>

<P><STRONG><a name="[6c]"></a>ATA583X_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ata5833.o(i.ATA583X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ATA583X_Init &rArr; CheckEEPSW &rArr; ATA583X_ReadEEPROM &rArr; ATA583X_SPIProc &rArr; SimSPI_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEEPSW
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_IDLEMode
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtionProc
</UL>

<P><STRONG><a name="[6f]"></a>ATA583X_RFTxFrameProc</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, ata5833.o(i.ATA583X_RFTxFrameProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ATA583X_RFTxFrameProc &rArr; ATA583X_TxMode &rArr; ATA583X_SPIProc &rArr; SimSPI_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wfDelay_us
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_TxMode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_IDLEMode
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_7A
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyRFTx
</UL>

<P><STRONG><a name="[72]"></a>ATA583X_ReadEEPROM</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ata5833.o(i.ATA583X_ReadEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ATA583X_ReadEEPROM &rArr; ATA583X_SPIProc &rArr; SimSPI_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_SPIProc
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEEPSW
</UL>

<P><STRONG><a name="[73]"></a>ATA583X_RxMode</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ata5833.o(i.ATA583X_RxMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ATA583X_RxMode &rArr; ATA583X_SPIProc &rArr; SimSPI_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_SPIProc
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
</UL>

<P><STRONG><a name="[67]"></a>ATA583X_SPIProc</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ata5833.o(i.ATA583X_SPIProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ATA583X_SPIProc &rArr; SimSPI_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimSPI_Proc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wfDelay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_TxMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_RxMode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_ReadEEPROM
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_IDLEMode
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_Check
</UL>

<P><STRONG><a name="[77]"></a>ATA583X_TxFrameProc</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, ata5833.o(i.ATA583X_TxFrameProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ATA583X_TxFrameProc &rArr; ATA583X_TxMode &rArr; ATA583X_SPIProc &rArr; SimSPI_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wfDelay_us
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_TxMode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_IDLEMode
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
</UL>

<P><STRONG><a name="[70]"></a>ATA583X_TxMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ata5833.o(i.ATA583X_TxMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ATA583X_TxMode &rArr; ATA583X_SPIProc &rArr; SimSPI_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_SPIProc
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_TxFrameProc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_RFTxFrameProc
</UL>

<P><STRONG><a name="[78]"></a>ATA583X_WaitRx</STRONG> (Thumb, 890 bytes, Stack size 40 bytes, function.o(i.ATA583X_WaitRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = ATA583X_WaitRx &rArr; ATA583X_FrameProc
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVerify_Sum
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wfDelay_us
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteBytes
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsedDEC
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyWorkValue
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRFState
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteByte
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadByte
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyParam
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDoorProc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_TxFrameProc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_RxMode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_IDLEMode
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_FrameProc
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>BreakMyBlock</STRONG> (Thumb, 30 bytes, Stack size 104 bytes, function.o(i.BreakMyBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BreakMyBlock &rArr; RomData_WriteBytes &rArr; SPIROM_WriteArray &rArr; SPIROM_WriteEnable &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
</UL>

<P><STRONG><a name="[19]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>ButtionProc</STRONG> (Thumb, 702 bytes, Stack size 40 bytes, buttonproc.o(i.ButtionProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ButtionProc &rArr; GetKeyParam &rArr; GetLeftTimeBlock &rArr; FixDataBlock &rArr; HashCalc_N &rArr; lcyHashCalc &rArr; lcyHashOnce &rArr; sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteByte
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseRom
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyParam
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDoorProc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyRFTx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyRFIRTx
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadButton
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIRTxProc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>CarIRRxProc</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, oncarproc.o(i.CarIRRxProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CarIRRxProc &rArr; ProcCommand_7A &rArr; RomData_WriteBytes &rArr; SPIROM_WriteArray &rArr; SPIROM_WriteEnable &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_IT
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_7A
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_0F
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCarProc
</UL>

<P><STRONG><a name="[92]"></a>CarIRTxProc</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, oncarproc.o(i.CarIRTxProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CarIRTxProc &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_7A
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_26
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_0F
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTx2425Frame
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRTx_10_28
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRTx_10_33_SSID
</UL>

<P><STRONG><a name="[94]"></a>CarIRTx_10_28</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, oncarproc.o(i.CarIRTx_10_28))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CarIRTx_10_28 &rArr; CarIRTxProc &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRTxProc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCarProc
</UL>

<P><STRONG><a name="[95]"></a>CarIRTx_10_33_SSID</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oncarproc.o(i.CarIRTx_10_33_SSID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CarIRTx_10_33_SSID &rArr; CarIRTxProc &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRTxProc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCarProc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashCalc_N
</UL>

<P><STRONG><a name="[96]"></a>ChangeKeyState</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, function.o(i.ChangeKeyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ChangeKeyState &rArr; RomData_WriteBytes &rArr; SPIROM_WriteArray &rArr; SPIROM_WriteEnable &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_39
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCarProc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyState
</UL>

<P><STRONG><a name="[7f]"></a>ChangeRFState</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, function.o(i.ChangeRFState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ChangeRFState &rArr; RomData_WriteBytes &rArr; SPIROM_WriteArray &rArr; SPIROM_WriteEnable &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCarProc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyState
</UL>

<P><STRONG><a name="[97]"></a>CheckDataBlockVerify</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, function.o(i.CheckDataBlockVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CheckDataBlockVerify &rArr; RomData_ReadBytes &rArr; SPIROM_ReadArray &rArr; SPIROM_ReadStatus &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVerify_byteXOR
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftTimeBlock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyParam
</UL>

<P><STRONG><a name="[6d]"></a>CheckEEPSW</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, variables.o(i.CheckEEPSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CheckEEPSW &rArr; ATA583X_ReadEEPROM &rArr; ATA583X_SPIProc &rArr; SimSPI_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFlash
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_ReadEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_Init
</UL>

<P><STRONG><a name="[1c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[ab]"></a>FLASH_FlushCaches</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[aa]"></a>FLASH_PageErase</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[9c]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32l4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_PCROPConfig
</UL>

<P><STRONG><a name="[9e]"></a>FixDataBlock</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, function.o(i.FixDataBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = FixDataBlock &rArr; HashCalc_N &rArr; lcyHashCalc &rArr; lcyHashOnce &rArr; sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVerify_byteXOR
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteBytes
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadBytes
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashCalc_N
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftTimeBlock
</UL>

<P><STRONG><a name="[a0]"></a>GenerateEEPSW</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, variables.o(i.GenerateEEPSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GenerateEEPSW &rArr; lcyHashOnce &rArr; sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>GetCalcTimes69</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, function.o(i.GetCalcTimes69))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetCalcTimes69 &rArr; ReverseRom &rArr; RomData_WriteByte &rArr; SPIROM_WriteByte &rArr; SPIROM_WriteEnable &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadBytes
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseRom
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyParam
</UL>

<P><STRONG><a name="[7e]"></a>GetDoorProc</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, function.o(i.GetDoorProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetDoorProc &rArr; lcyHashOnce &rArr; sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtionProc
</UL>

<P><STRONG><a name="[a3]"></a>GetFshKey</STRONG> (Thumb, 154 bytes, Stack size 28 bytes, lcyirdecode.o(i.GetFshKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetFshKey
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFshData
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyIRDecode
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftFshKey
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixFshKey
</UL>

<P><STRONG><a name="[79]"></a>GetKeyParam</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, function.o(i.GetKeyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GetKeyParam &rArr; GetLeftTimeBlock &rArr; FixDataBlock &rArr; HashCalc_N &rArr; lcyHashCalc &rArr; lcyHashOnce &rArr; sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVerify_byteXOR
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashOnce
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashCalc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteBytes
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadBytes
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftTimeBlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCalcTimes69
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDataBlockVerify
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCarProc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtionProc
</UL>

<P><STRONG><a name="[83]"></a>GetKeyState</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, function.o(i.GetKeyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetKeyState &rArr; ChangeRFState &rArr; RomData_WriteBytes &rArr; SPIROM_WriteArray &rArr; SPIROM_WriteEnable &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadBytes
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRFState
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeKeyState
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtionProc
</UL>

<P><STRONG><a name="[80]"></a>GetKeyWorkValue</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, function.o(i.GetKeyWorkValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetKeyWorkValue &rArr; lcyHashOnce &rArr; sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_26
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
</UL>

<P><STRONG><a name="[a5]"></a>GetLeftTimeBlock</STRONG> (Thumb, 830 bytes, Stack size 40 bytes, function.o(i.GetLeftTimeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = GetLeftTimeBlock &rArr; FixDataBlock &rArr; HashCalc_N &rArr; lcyHashCalc &rArr; lcyHashOnce &rArr; sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVerify_byteXOR
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteBytes
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadBytes
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixDataBlock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDataBlockVerify
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyParam
</UL>

<P><STRONG><a name="[7b]"></a>GetVerify_Sum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, verify.o(i.GetVerify_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVerify_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
</UL>

<P><STRONG><a name="[99]"></a>GetVerify_byteXOR</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, verify.o(i.GetVerify_byteXOR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVerify_byteXOR
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftTimeBlock
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixDataBlock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDataBlockVerify
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyParam
</UL>

<P><STRONG><a name="[6e]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFlash
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCarProc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlash
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadButton
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtionProc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32l4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[157]"></a>HAL_FLASHEx_OBGetConfig</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.HAL_FLASHEx_OBGetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
</UL>

<P><STRONG><a name="[ac]"></a>HAL_FLASHEx_OBProgram</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, stm32l4xx_hal_flash_ex.o(i.HAL_FLASHEx_OBProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_FLASHEx_OBProgram &rArr; FLASH_OB_UserConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_PCROPConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
</UL>

<P><STRONG><a name="[12f]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[158]"></a>HAL_FLASH_OB_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_OB_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
</UL>

<P><STRONG><a name="[156]"></a>HAL_FLASH_OB_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_OB_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
</UL>

<P><STRONG><a name="[ad]"></a>HAL_FLASH_Program</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Fast
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[12e]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[dd]"></a>HAL_GPIO_Init</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[65]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS3933_Proc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimSPI_Proc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimSPI2_Proc
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCarPowerOff
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteBytes
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashCalc_N
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteByte
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadButton
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtionProc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_ICProc
</UL>

<P><STRONG><a name="[15c]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFlash
</UL>

<P><STRONG><a name="[61]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS3933_WriteReg
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS3933_Proc
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS3933_COMM
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteEnable
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteDisable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteArray
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_ReadStatus
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_ReadByte
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_ReadArray
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimSPI_Proc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimSPI_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimSPI2_Proc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimSPI2_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_7A
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_39
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCarProc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlash
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteBytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteByte
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtionProc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_TxFrameProc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_SPIProc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_RxMode
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_RFTxFrameProc
</UL>

<P><STRONG><a name="[75]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRTxProc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRRxProc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_RxMode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[132]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b0]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b3]"></a>HAL_MspInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[de]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[b5]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b1]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_PCDEx_ActivateLPM</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_hal_pcd_ex.o(i.HAL_PCDEx_ActivateLPM))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCDEx_LPM_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_PCDEx_LPM_Callback &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>HAL_PCDEx_PMAConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32l4xx_hal_pcd_ex.o(i.HAL_PCDEx_PMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCDEx_PMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[bb]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[bd]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[bf]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[c1]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[c3]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[c5]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[c7]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[ca]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[cb]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 380 bytes, Stack size 8 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HAL_PCD_IRQHandler &rArr; HAL_PCDEx_LPM_Callback &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>HAL_PCD_Init</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_ActivateLPM
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[d4]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[ce]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HAL_PCD_ResumeCallback &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[e4]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[e6]"></a>HAL_PCD_Start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[d1]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[148]"></a>HAL_PWREx_EnableVddUSB</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableVddUSB))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[123]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[e9]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 486 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ea]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[eb]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ec]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1404 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b4]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ff]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[ee]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[ef]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[69]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRTxProc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_ICProc
</UL>

<P><STRONG><a name="[8f]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRRxProc
</UL>

<P><STRONG><a name="[f1]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IC_CaptureCallback &rArr; HAL_TIM_PWM_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_IT
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThranslateCarIRRx
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_ICProc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IC_ConfigChannel &rArr; TIM_TI1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[f8]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[74]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRRxProc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_RxMode
</UL>

<P><STRONG><a name="[8e]"></a>HAL_TIM_IC_Stop_IT</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IC_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRRxProc
</UL>

<P><STRONG><a name="[fa]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PWM_PulseFinishedCallback &rArr; HAL_TIM_PWM_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[fb]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[10a]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[10b]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_PWM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[fc]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_PWM_PulseFinishedCallback &rArr; HAL_TIM_PWM_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_IT
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRTxProc
</UL>

<P><STRONG><a name="[10c]"></a>HAL_TIM_PWM_Start_IT</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIRTxProc
</UL>

<P><STRONG><a name="[f3]"></a>HAL_TIM_PWM_Stop_IT</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[fd]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; HAL_TIM_IC_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_IT
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_IT
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_ReadCapturedValue))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_ICProc
</UL>

<P><STRONG><a name="[100]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[17]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>HashCalc_N</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, function.o(i.HashCalc_N))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HashCalc_N &rArr; lcyHashCalc &rArr; lcyHashOnce &rArr; sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashCalc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRTx_10_33_SSID
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixDataBlock
</UL>

<P><STRONG><a name="[10d]"></a>IRTx2425Frame</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, oncarproc.o(i.IRTx2425Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IRTx2425Frame &rArr; RomData_ReadBytes &rArr; SPIROM_ReadArray &rArr; SPIROM_ReadStatus &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRTxProc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCarProc
</UL>

<P><STRONG><a name="[10e]"></a>LEDFlash</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, oncarproc.o(i.LEDFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEDFlash &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCarPowerOff
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
</UL>

<P><STRONG><a name="[110]"></a>MX_GPIO_Init</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>MX_TIM16_Init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tim.o(i.MX_TIM16_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_TIM16_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>MX_TIM2_Init</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usb_device.o(i.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_RegisterInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>MixFshKey</STRONG> (Thumb, 186 bytes, Stack size 20 bytes, lcyirdecode.o(i.MixFshKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MixFshKey &rArr; ShiftFshKey &rArr; GetFshKey
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftMixKey
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftFshKey
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFshKey
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyIRDecode
</UL>

<P><STRONG><a name="[16]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>OnCarProc</STRONG> (Thumb, 358 bytes, Stack size 0 bytes, oncarproc.o(i.OnCarProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = OnCarProc &rArr; ProgramWork &rArr; GetKeyParam &rArr; GetLeftTimeBlock &rArr; FixDataBlock &rArr; HashCalc_N &rArr; lcyHashCalc &rArr; lcyHashOnce &rArr; sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_39
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_26
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTx2425Frame
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRTx_10_28
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRRxProc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteBytes
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadBytes
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRTx_10_33_SSID
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsedDEC
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRFState
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeKeyState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyParam
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>ProcCommand_0F</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oncarproc.o(i.ProcCommand_0F))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ProcCommand_0F &rArr; CarIRTxProc &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRTxProc
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRRxProc
</UL>

<P><STRONG><a name="[11d]"></a>ProcCommand_26</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, oncarproc.o(i.ProcCommand_26))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ProcCommand_26 &rArr; GetKeyWorkValue &rArr; lcyHashOnce &rArr; sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRTxProc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyWorkValue
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCarProc
</UL>

<P><STRONG><a name="[11e]"></a>ProcCommand_39</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, oncarproc.o(i.ProcCommand_39))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ProcCommand_39 &rArr; ChangeKeyState &rArr; RomData_WriteBytes &rArr; SPIROM_WriteArray &rArr; SPIROM_WriteEnable &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashOnce
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteBytes
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadBytes
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeKeyState
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCarProc
</UL>

<P><STRONG><a name="[90]"></a>ProcCommand_7A</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, oncarproc.o(i.ProcCommand_7A))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ProcCommand_7A &rArr; RomData_WriteBytes &rArr; SPIROM_WriteArray &rArr; SPIROM_WriteEnable &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCarPowerOff
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRTxProc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteBytes
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadBytes
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadByte
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIRTxProc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_RFTxFrameProc
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRRxProc
</UL>

<P><STRONG><a name="[11f]"></a>ProgramWork</STRONG> (Thumb, 864 bytes, Stack size 56 bytes, oncarproc.o(i.ProgramWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = ProgramWork &rArr; GetKeyParam &rArr; GetLeftTimeBlock &rArr; FixDataBlock &rArr; HashCalc_N &rArr; lcyHashCalc &rArr; lcyHashOnce &rArr; sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVerify_byteXOR
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyIRDecode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashOnce
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashCalc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCarPowerOff
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlash
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarIRTxProc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteBytes
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadBytes
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyEEDatas
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDataBlockVerify
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeKeyState
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreakMyBlock
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseRom
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCarProc
</UL>

<P><STRONG><a name="[8a]"></a>RFIRTxProc</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, buttonproc.o(i.RFIRTxProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RFIRTxProc &rArr; HAL_TIM_PWM_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_7A
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyRFIRTx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtionProc
</UL>

<P><STRONG><a name="[89]"></a>ReadButton</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, buttonproc.o(i.ReadButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadButton &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtionProc
</UL>

<P><STRONG><a name="[a4]"></a>ReadFshData</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lcyirdecode.o(i.ReadFshData))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftMixKey
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftFshKey
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFshKey
</UL>

<P><STRONG><a name="[86]"></a>ReverseRom</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, function.o(i.ReverseRom))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ReverseRom &rArr; RomData_WriteByte &rArr; SPIROM_WriteByte &rArr; SPIROM_WriteEnable &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteByte
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsedDEC
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCalcTimes69
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtionProc
</UL>

<P><STRONG><a name="[7c]"></a>RomData_ReadByte</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, variables.o(i.RomData_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RomData_ReadByte &rArr; SPIROM_ReadByte &rArr; SPIROM_ReadStatus &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_7A
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftTimeBlock
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseRom
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyParam
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtionProc
</UL>

<P><STRONG><a name="[98]"></a>RomData_ReadBytes</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, variables.o(i.RomData_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RomData_ReadBytes &rArr; SPIROM_ReadArray &rArr; SPIROM_ReadStatus &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_ReadArray
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_7A
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_39
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCarProc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTx2425Frame
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyEEDatas
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftTimeBlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCalcTimes69
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixDataBlock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDataBlockVerify
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyParam
</UL>

<P><STRONG><a name="[7d]"></a>RomData_WriteByte</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, variables.o(i.RomData_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RomData_WriteByte &rArr; SPIROM_WriteByte &rArr; SPIROM_WriteEnable &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteByte
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsedDEC
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCalcTimes69
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseRom
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtionProc
</UL>

<P><STRONG><a name="[82]"></a>RomData_WriteBytes</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, variables.o(i.RomData_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RomData_WriteBytes &rArr; SPIROM_WriteArray &rArr; SPIROM_WriteEnable &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteArray
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_7A
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_39
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCarProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftTimeBlock
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixDataBlock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeRFState
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeKeyState
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreakMyBlock
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyParam
</UL>

<P><STRONG><a name="[128]"></a>SPIROM_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spirom.o(i.SPIROM_Init))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>SPIROM_ReadArray</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, spirom.o(i.SPIROM_ReadArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPIROM_ReadArray &rArr; SPIROM_ReadStatus &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_ReadStatus
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimSPI2_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadBytes
</UL>

<P><STRONG><a name="[124]"></a>SPIROM_ReadByte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, spirom.o(i.SPIROM_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIROM_ReadByte &rArr; SPIROM_ReadStatus &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_ReadStatus
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimSPI2_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadByte
</UL>

<P><STRONG><a name="[129]"></a>SPIROM_ReadStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, spirom.o(i.SPIROM_ReadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIROM_ReadStatus &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimSPI2_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteArray
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_ReadByte
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_ReadArray
</UL>

<P><STRONG><a name="[127]"></a>SPIROM_WriteArray</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, spirom.o(i.SPIROM_WriteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPIROM_WriteArray &rArr; SPIROM_WriteEnable &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteEnable
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteDisable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_ReadStatus
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimSPI2_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteBytes
</UL>

<P><STRONG><a name="[126]"></a>SPIROM_WriteByte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spirom.o(i.SPIROM_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIROM_WriteByte &rArr; SPIROM_WriteEnable &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteEnable
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteDisable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_ReadStatus
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimSPI2_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteByte
</UL>

<P><STRONG><a name="[12c]"></a>SPIROM_WriteDisable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spirom.o(i.SPIROM_WriteDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIROM_WriteDisable &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimSPI2_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteArray
</UL>

<P><STRONG><a name="[12b]"></a>SPIROM_WriteEnable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spirom.o(i.SPIROM_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIROM_WriteEnable &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimSPI2_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteArray
</UL>

<P><STRONG><a name="[12d]"></a>STMFLASH_Write</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, variables.o(i.STMFLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STMFLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
</UL>

<P><STRONG><a name="[1b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>ShiftFshKey</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lcyirdecode.o(i.ShiftFshKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ShiftFshKey &rArr; GetFshKey
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFshData
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFshKey
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixFshKey
</UL>

<P><STRONG><a name="[11b]"></a>ShiftMixKey</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, lcyirdecode.o(i.ShiftMixKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ShiftMixKey
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFshData
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixFshKey
</UL>

<P><STRONG><a name="[130]"></a>SimSPI2_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, simspi.o(i.SimSPI2_Init))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>SimSPI2_Proc</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, simspi.o(i.SimSPI2_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteEnable
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteDisable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_WriteArray
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_ReadStatus
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_ReadByte
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_ReadArray
</UL>

<P><STRONG><a name="[131]"></a>SimSPI_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, simspi.o(i.SimSPI_Init))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>SimSPI_Proc</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, simspi.o(i.SimSPI_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SimSPI_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_SPIProc
</UL>

<P><STRONG><a name="[1e]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>SystemClock_Config</STRONG> (Thumb, 118 bytes, Stack size 152 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
</UL>

<P><STRONG><a name="[58]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.TIM1_UP_TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM1_UP_TIM16_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PWM_PulseFinishedCallback &rArr; HAL_TIM_PWM_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PWM_PulseFinishedCallback &rArr; HAL_TIM_PWM_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[f9]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_IT
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_IT
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_IT
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
</UL>

<P><STRONG><a name="[105]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[f5]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[f2]"></a>ThranslateCarIRRx</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, oncarproc.o(i.ThranslateCarIRRx))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[117]"></a>USBD_CUSTOM_HID_RegisterInterface</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_RegisterInterface))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[139]"></a>USBD_CUSTOM_HID_SendReport</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_SendReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CUSTOM_HID_SendReport &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
</UL>

<P><STRONG><a name="[151]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[13e]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[13f]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[13d]"></a>USBD_CtlError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Setup
</UL>

<P><STRONG><a name="[13b]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Setup
</UL>

<P><STRONG><a name="[141]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[13c]"></a>USBD_CtlSendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Setup
</UL>

<P><STRONG><a name="[142]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[5]"></a>USBD_FS_ConfigStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>USBD_FS_DeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBD_FS_InterfaceStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>USBD_FS_LangIDStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBD_FS_ManufacturerStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBD_FS_ProductStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBD_FS_SerialStrDescriptor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_FS_SerialStrDescriptor &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBD_FS_USR_BOSDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_USR_BOSDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[143]"></a>USBD_GetString</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductStrDescriptor
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerStrDescriptor
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceStrDescriptor
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[115]"></a>USBD_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[147]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[135]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_DeInit
</UL>

<P><STRONG><a name="[bc]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[be]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[146]"></a>USBD_LL_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableVddUSB
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_PMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[153]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[137]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Init
</UL>

<P><STRONG><a name="[134]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_DataOut
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
</UL>

<P><STRONG><a name="[e1]"></a>USBD_LL_Reset</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[ba]"></a>USBD_LL_Resume</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
</UL>

<P><STRONG><a name="[e2]"></a>USBD_LL_SOF</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[e0]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[14a]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[e5]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[140]"></a>USBD_LL_StallEP</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[14f]"></a>USBD_LL_Start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[b8]"></a>USBD_LL_Suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
</UL>

<P><STRONG><a name="[13a]"></a>USBD_LL_Transmit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_SendReport
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[14b]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[116]"></a>USBD_RegisterClass</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[152]"></a>USBD_SetClassConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[118]"></a>USBD_Start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[14c]"></a>USBD_StdDevReq</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[14e]"></a>USBD_StdEPReq</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[14d]"></a>USBD_StdItfReq</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[136]"></a>USBD_static_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_free))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_DeInit
</UL>

<P><STRONG><a name="[138]"></a>USBD_static_malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Init
</UL>

<P><STRONG><a name="[8c]"></a>USBProc</STRONG> (Thumb, 728 bytes, Stack size 112 bytes, usbinteraction.o(i.USBProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = USBProc &rArr; GetKeyParam &rArr; GetLeftTimeBlock &rArr; FixDataBlock &rArr; HashCalc_N &rArr; lcyHashCalc &rArr; lcyHashOnce &rArr; sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVerify_byteXOR
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashOnce
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashCalc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_SendReport
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Unlock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Lock
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wfFlash_ReadDoubleWords
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteBytes
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadBytes
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDataBlockVerify
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeKeyState
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreakMyBlock
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseRom
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_HID_OutEvent_FS
</UL>

<P><STRONG><a name="[c4]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 608 bytes, Stack size 32 bytes, stm32l4xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[d7]"></a>USB_CoreInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[c0]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 270 bytes, Stack size 28 bytes, stm32l4xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[e7]"></a>USB_DevConnect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[db]"></a>USB_DevDisconnect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[d9]"></a>USB_DevInit</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, stm32l4xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_DevInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[d5]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[c9]"></a>USB_EP0_OutStart</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[c2]"></a>USB_EPClearStall</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32l4xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[c8]"></a>USB_EPSetStall</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32l4xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[c6]"></a>USB_EPStartXfer</STRONG> (Thumb, 386 bytes, Stack size 20 bytes, stm32l4xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePMA
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[e8]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[4c]"></a>USB_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USB_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; HAL_PCDEx_LPM_Callback &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>USB_ReadInterrupts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>USB_ReadPMA</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_ll_usb.o(i.USB_ReadPMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadPMA
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[d8]"></a>USB_SetCurrentMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[e3]"></a>USB_SetDevAddress</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[159]"></a>USB_WritePMA</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l4xx_ll_usb.o(i.USB_WritePMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_WritePMA
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>

<P><STRONG><a name="[1a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l412xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>UsedDEC</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, function.o(i.UsedDEC))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UsedDEC &rArr; ReverseRom &rArr; RomData_WriteByte &rArr; SPIROM_WriteByte &rArr; SPIROM_WriteEnable &rArr; SimSPI2_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_WriteByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseRom
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCarProc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
</UL>

<P><STRONG><a name="[122]"></a>VerifyEEDatas</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, function.o(i.VerifyEEDatas))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VerifyEEDatas &rArr; lcyHashOnce &rArr; sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashOnce
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomData_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
</UL>

<P><STRONG><a name="[10f]"></a>WaitCarPowerOff</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, oncarproc.o(i.WaitCarPowerOff))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_7A
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlash
</UL>

<P><STRONG><a name="[179]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[17a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[17b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[88]"></a>keyRFIRTx</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, buttonproc.o(i.keyRFIRTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = keyRFIRTx &rArr; RFIRTxProc &rArr; HAL_TIM_PWM_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIRTxProc
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtionProc
</UL>

<P><STRONG><a name="[87]"></a>keyRFTx</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, buttonproc.o(i.keyRFTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = keyRFTx &rArr; ATA583X_RFTxFrameProc &rArr; ATA583X_TxMode &rArr; ATA583X_SPIProc &rArr; SimSPI_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_RFTxFrameProc
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtionProc
</UL>

<P><STRONG><a name="[a6]"></a>lcyHashCalc</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, lcyhash.o(i.lcyHashCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lcyHashCalc &rArr; lcyHashOnce &rArr; sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashCalc_N
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyParam
</UL>

<P><STRONG><a name="[155]"></a>lcyHashInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcyhash.o(i.lcyHashInit))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
</UL>

<P><STRONG><a name="[a1]"></a>lcyHashOnce</STRONG> (Thumb, 64 bytes, Stack size 28 bytes, lcyhash.o(i.lcyHashOnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lcyHashOnce &rArr; sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_half
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_add
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashCalc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateEEPSW
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCommand_39
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyEEDatas
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyWorkValue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyParam
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDoorProc
</UL>

<P><STRONG><a name="[121]"></a>lcyIRDecode</STRONG> (Thumb, 152 bytes, Stack size 28 bytes, lcyirdecode.o(i.lcyIRDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lcyIRDecode &rArr; MixFshKey &rArr; ShiftFshKey &rArr; GetFshKey
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixFshKey
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFshKey
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWork
</UL>

<P><STRONG><a name="[9a]"></a>ledFlash</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, variables.o(i.ledFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ledFlash &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEEPSW
</UL>

<P><STRONG><a name="[16a]"></a>loadTab</STRONG> (Thumb, 54 bytes, Stack size 44 bytes, lcyhash.o(i.loadTab))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = loadTab
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_half
</UL>

<P><STRONG><a name="[57]"></a>main</STRONG> (Thumb, 370 bytes, Stack size 80 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = main &rArr; ATA583X_WaitRx &rArr; ATA583X_FrameProc
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS3933_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS3933_COMM
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIROM_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimSPI_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimSPI2_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wfDelay_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Unlock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Lock
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFlash
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateEEPSW
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCarProc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlash
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyParam
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadButton
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtionProc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[165]"></a>sub_Mixed_A</STRONG> (Thumb, 52 bytes, Stack size 52 bytes, lcyhash.o(i.sub_Mixed_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sub_Mixed_A
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_half
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal_R_A
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal_L_A
</UL>

<P><STRONG><a name="[169]"></a>sub_Mixed_B</STRONG> (Thumb, 52 bytes, Stack size 52 bytes, lcyhash.o(i.sub_Mixed_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sub_Mixed_B
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal_R_B
</UL>

<P><STRONG><a name="[164]"></a>sub_Shift_L</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, lcyhash.o(i.sub_Shift_L))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sub_Shift_L
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal_L_A
</UL>

<P><STRONG><a name="[167]"></a>sub_Shift_R</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, lcyhash.o(i.sub_Shift_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sub_Shift_R
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal_R_B
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal_R_A
</UL>

<P><STRONG><a name="[15b]"></a>sub_add</STRONG> (Thumb, 164 bytes, Stack size 28 bytes, lcyhash.o(i.sub_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sub_add
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashOnce
</UL>

<P><STRONG><a name="[15f]"></a>sub_add_4B</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lcyhash.o(i.sub_add_4B))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sub_add_4B
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal3
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal2
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal1
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal0
</UL>

<P><STRONG><a name="[15e]"></a>sub_cal0</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, lcyhash.o(i.sub_cal0))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sub_cal0 &rArr; sub_add_4B
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_add_4B
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_half
</UL>

<P><STRONG><a name="[160]"></a>sub_cal1</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcyhash.o(i.sub_cal1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sub_cal1 &rArr; sub_add_4B
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_add_4B
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_half
</UL>

<P><STRONG><a name="[161]"></a>sub_cal2</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lcyhash.o(i.sub_cal2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sub_cal2 &rArr; sub_add_4B
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_add_4B
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_half
</UL>

<P><STRONG><a name="[162]"></a>sub_cal3</STRONG> (Thumb, 66 bytes, Stack size 28 bytes, lcyhash.o(i.sub_cal3))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sub_cal3 &rArr; sub_add_4B
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_add_4B
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_half
</UL>

<P><STRONG><a name="[163]"></a>sub_cal_L_A</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lcyhash.o(i.sub_cal_L_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sub_cal_L_A &rArr; sub_Mixed_A
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Shift_L
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Mixed_A
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_half
</UL>

<P><STRONG><a name="[166]"></a>sub_cal_R_A</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lcyhash.o(i.sub_cal_R_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sub_cal_R_A &rArr; sub_Mixed_A
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Shift_R
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Mixed_A
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_half
</UL>

<P><STRONG><a name="[168]"></a>sub_cal_R_B</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lcyhash.o(i.sub_cal_R_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Shift_R
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Mixed_B
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_half
</UL>

<P><STRONG><a name="[15a]"></a>sub_half</STRONG> (Thumb, 392 bytes, Stack size 12 bytes, lcyhash.o(i.sub_half))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal_R_B
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal_R_A
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal_L_A
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal3
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal2
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal1
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_cal0
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Mixed_A
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadTab
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcyHashOnce
</UL>

<P><STRONG><a name="[15d]"></a>wfDelay_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wfsys.o(i.wfDelay_init))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>wfDelay_us</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wfsys.o(i.wfDelay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wfDelay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_WaitRx
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_TxFrameProc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_SPIProc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATA583X_RFTxFrameProc
</UL>

<P><STRONG><a name="[154]"></a>wfFlash_ReadDoubleWords</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, variables.o(i.wfFlash_ReadDoubleWords))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wfFlash_ReadDoubleWords
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8b]"></a>__NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, buttonproc.o(i.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtionProc
</UL>

<P><STRONG><a name="[a7]"></a>__NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, function.o(i.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsedDEC
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyState
</UL>

<P><STRONG><a name="[144]"></a>IntToUnicode</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, usbd_desc.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_SerialStrDescriptor
</UL>

<P><STRONG><a name="[9]"></a>CUSTOM_HID_DeInit_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_custom_hid_if.o(i.CUSTOM_HID_DeInit_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_if.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>CUSTOM_HID_Init_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_custom_hid_if.o(i.CUSTOM_HID_Init_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_if.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>CUSTOM_HID_OutEvent_FS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_custom_hid_if.o(i.CUSTOM_HID_OutEvent_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = CUSTOM_HID_OutEvent_FS &rArr; USBProc &rArr; GetKeyParam &rArr; GetLeftTimeBlock &rArr; FixDataBlock &rArr; HashCalc_N &rArr; lcyHashCalc &rArr; lcyHashOnce &rArr; sub_half &rArr; sub_cal_R_B &rArr; sub_Mixed_B
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_if.o(.data)
</UL>
<P><STRONG><a name="[cd]"></a>PCD_EP_ISR_Handler</STRONG> (Thumb, 668 bytes, Stack size 40 bytes, stm32l4xx_hal_pcd.o(i.PCD_EP_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = PCD_EP_ISR_Handler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPMA
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, stm32l4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[106]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[107]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[108]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[109]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[f6]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_TI2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[ed]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[ae]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[af]"></a>FLASH_Program_Fast</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l4xx_hal_flash.o(i.FLASH_Program_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[a9]"></a>FLASH_MassErase</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[9b]"></a>FLASH_OB_PCROPConfig</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_OB_PCROPConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_OB_PCROPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[9d]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_OB_UserConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_OB_UserConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[b6]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[145]"></a>USBD_GetDescriptor</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[150]"></a>USBD_SetConfig</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[f]"></a>USBD_CUSTOM_HID_DataIn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_DataIn))
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_CUSTOM_HID_DataOut</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_CUSTOM_HID_DataOut &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBD_CUSTOM_HID_DeInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_CUSTOM_HID_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_free
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_CUSTOM_HID_EP0_RxReady</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CUSTOM_HID_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBD_CUSTOM_HID_GetDeviceQualifierDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_GetDeviceQualifierDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_CUSTOM_HID_GetFSCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_GetFSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBD_CUSTOM_HID_GetHSCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_GetHSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBD_CUSTOM_HID_GetOtherSpeedCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_GetOtherSpeedCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBD_CUSTOM_HID_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_CUSTOM_HID_Init &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_malloc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBD_CUSTOM_HID_Setup</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_CUSTOM_HID_Setup &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
